/** \page developers DEVELOPER NOTES
\verbatim
0. Dependencies:

    libSDL      http://www.libsdl.org/
    libogg
    libvorbis
    libtheora   all available at http://xiph.org/downloads/

1. Building on Linux - easy

    Notes: This requires autoconf, you may need to install this too.

    1)  Use your favorite package manager to get development libraries, ie:
        # apt-get install libsdl-dev libtheora-dev libogg-dev libvorbis-dev
    2)  $ ./configure
    3)  $ make

    Notes: I needed to do these extra things before ./configure:

        # cp m4/theora.m4 /usr/share/aclocal/.
        $ aclocal -I m4
        $ autoconf

    autoconf prints one error:

        configure.in:51: error: possibly undefined macro: AC_TYPE_SSIZE_T

    which can be ignored

2. Cross compiling: Linux - Windows: tested

    1)  install the cross compiler as described at:
        http://www.libsdl.org/extras/win32/cross/README.txt
    2)  download SDL, development version for mingw32
    3)  copy SDL-xxx/lib/* from this tar file into your directory
        of choice
    4)  download SDL runtime for win32 and put SDL.dll into
        os_win32 directory.
    5)  download and cross-compile required libraries, put the dlls into
        os_win32 directory, static versions and C headers into directories
        you were using in step 3)
    6)  edit os_win32/configure.mingw, run it
    7)  make
    8)  to build an installer you will need makensis tool, get it from
        http://nsis.sourceforge.net/, it is also available in debian (nsis)

3. Building on Mac OS X

    1)  Download and install the Mac OS X version of SDL from libsdl.org
    2)  Download and install Sparkle's Sparkle.framework in os_macosx/vendors
    3)  Download and install Smart Crash Reports SDK into os_macosx/vendors
    4)  Use MacPorts to unstall libogg libvorbis and libtheora, use +universal
        if you plan on building full release builds
    5)  Unpack the data and music to race-data/ in the same directory that
        holds the race/ source tree. The data is embedded in the .app in
        the OS X version, so it is required at build time
    6)  Checkout the 'xiph' module to the same place as race/ and
        race-data/. Open the Xcode project, and build for both Debug and
        Release.
    7)  Open race/os_macosx/RaceIntoSpace.xcodeproj and compile.

4. Making RPM's

THIS SECTION (Making RPMs) NEEDS UPDATING

    1)  useful instructions:
        https://pmc.ucsc.edu/~dmk/notes/RPMs/Creating_RPMs.html
    2)  install rpmdevtools from fedora
    3)  run rpmdev-setuptree to make a build environment in your home
        directory
    4)  create ~/.rpmmacros as:
        %_topdir /home/race/rpmbuild
        %_tmppath /home/race/rpmbuild/tmp
    5)  run the script "mkrpm"

5. Building on Windows using mingw32

    This method was used in early testing, but may no longer work.  Give
    it  a shot  if  you like.   You will  need  development versions  of
    libraries mentioned  above. mingw32 version  of SDL is  available at
    http://libsdl.org, other ones  would probably have to  be built from
    source.

    1)  cd os_win32/
    2)  Edit file configure.mingw32
    3)  run ./configure.mingw32
    4)  make

    Msys can also be used to build the game under Windows.
    Once you have everything installed (libogg, libvorbis and libtheora must be made from source),
    you should follow the Linux instructions (1) inside msys.

6. CVS access

    You can  get the  most recent  version of  the game  using anonymous
    CVS   access. See  http://sourceforge.net/cvs/?group_id=129186   for
    instructions.

7. CVS Commiting

    1) write the new code
    2) update ChangeLog - make sure the GNU format is followed
       http://www.gnu.org/prep/standards/html_node/Change-Logs.html
    3) run "make clean && make" to check for errors
    4) update version.c - adding one to the current version number
    5) call "./checkin3" which will guide you through the actual commit

\endverbatim
*/
